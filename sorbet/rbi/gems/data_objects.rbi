# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/data_objects/all/data_objects.rbi
#
# data_objects-0.10.17
module DataObjects
  def self.exiting; end
  def self.exiting=(bool); end
  def self.full_const_get(name); end
  def self.logger; end
  def self.logger=(arg0); end
end
module DataObjects::Logging
  def log(message); end
end
class DataObjects::Logger
  def <<(string); end
  def aio; end
  def aio=(arg0); end
  def buffer; end
  def close; end
  def debug(message); end
  def debug?; end
  def delimiter; end
  def delimiter=(arg0); end
  def error(message); end
  def error?; end
  def fatal(message); end
  def fatal?; end
  def flush; end
  def info(message); end
  def info?; end
  def initialize(*args); end
  def initialize_log(log); end
  def internal_push(string); end
  def level; end
  def level=(new_level); end
  def log; end
  def off?; end
  def prep_msg(message, level); end
  def push(string); end
  def push_closed(string); end
  def push_opened(string); end
  def reset_methods(o_or_c); end
  def set_log(log, log_level = nil, delimiter = nil, log_creation = nil); end
  def set_write_method; end
  def warn(message); end
  def warn?; end
end
class DataObjects::Logger::Message < Struct
  def duration; end
  def duration=(_); end
  def query; end
  def query=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def start; end
  def start=(_); end
end
module Extlib
end
class Extlib::ByteArray < String
end
module DataObjects::Pooling
  def detach; end
  def release; end
  def self.append_pool(pool); end
  def self.included(target); end
  def self.lock; end
  def self.pools; end
  def self.scavenger; end
  def self.scavenger?; end
  def self.scavenger_interval; end
end
class DataObjects::Pooling::InvalidResourceError < StandardError
end
class DataObjects::Pooling::Pool
  def available; end
  def delete(instance); end
  def dispose; end
  def expired?; end
  def flush!; end
  def initialize(max_size, resource, args); end
  def inspect; end
  def length; end
  def lock; end
  def new; end
  def release(instance); end
  def scavenge_interval; end
  def size; end
  def used; end
  def wait; end
end
class DataObjects::Connection
  def create_command(text); end
  def dispose; end
  def driver_namespace; end
  def extension; end
  def initialize(uri); end
  def self.concrete_command; end
  def self.inherited(target); end
  def self.new(uri_s); end
  def to_s; end
  include DataObjects::Logging
end
class DataObjects::URI
  def eql?(other); end
  def fragment; end
  def hash; end
  def host; end
  def initialize(*args); end
  def opaque?; end
  def password; end
  def path; end
  def port; end
  def query; end
  def relative?; end
  def scheme; end
  def self.parse(uri); end
  def subscheme; end
  def to_s; end
  def user; end
end
class DataObjects::Transaction
  def begin; end
  def begin_prepared; end
  def close; end
  def commit; end
  def commit_prepared; end
  def connection; end
  def id; end
  def initialize(uri, connection = nil); end
  def not_implemented; end
  def prepare; end
  def rollback; end
  def rollback_prepared; end
  def run(cmd); end
  def self.create_for_uri(uri); end
end
class DataObjects::SavePoint < DataObjects::Transaction
  def begin; end
  def close; end
  def commit; end
  def rollback; end
  def self.create_for_uri(uri, connection); end
end
class DataObjects::Command
  def connection; end
  def escape_sql(args); end
  def execute_non_query(*args); end
  def execute_reader(*args); end
  def initialize(connection, text); end
  def set_types(column_types); end
  def to_s; end
end
class DataObjects::Result
  def affected_rows; end
  def affected_rows=(arg0); end
  def initialize(command, affected_rows, insert_id = nil); end
  def insert_id; end
  def insert_id=(arg0); end
  def to_i; end
end
class DataObjects::Reader
  def close; end
  def each; end
  def field_count; end
  def fields; end
  def next!; end
  def values; end
  include Enumerable
end
module DataObjects::Quoting
  def quote_array(value); end
  def quote_boolean(value); end
  def quote_byte_array(value); end
  def quote_class(value); end
  def quote_date(value); end
  def quote_datetime(value); end
  def quote_numeric(value); end
  def quote_range(value); end
  def quote_regexp(value); end
  def quote_string(value); end
  def quote_symbol(value); end
  def quote_time(value); end
  def quote_value(value); end
end
class DataObjects::Extension
  def connection; end
  def initialize(connection); end
end
class DataObjects::Error < StandardError
end
class DataObjects::SQLError < DataObjects::Error
  def code; end
  def initialize(message, code = nil, sqlstate = nil, query = nil, uri = nil); end
  def message; end
  def query; end
  def sqlstate; end
  def to_s; end
  def uri; end
end
class DataObjects::ConnectionError < DataObjects::SQLError
end
class DataObjects::DataError < DataObjects::SQLError
end
class DataObjects::IntegrityError < DataObjects::SQLError
end
class DataObjects::SyntaxError < DataObjects::SQLError
end
class DataObjects::TransactionError < DataObjects::SQLError
end
