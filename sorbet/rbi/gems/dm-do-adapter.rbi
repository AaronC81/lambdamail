# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dm-do-adapter/all/dm-do-adapter.rbi
#
# dm-do-adapter-1.2.0
module DataMapper
end
module DataMapper::Adapters
end
class DataMapper::Adapters::DataObjectsAdapter < DataMapper::Adapters::AbstractAdapter
  def create(resources); end
  def delete(collection); end
  def execute(statement, *bind_values); end
  def initialize(name, uri_or_options); end
  def normalized_uri; end
  def query(*args, &block); end
  def read(query); end
  def select(statement, *bind_values); end
  def select_field(reader); end
  def select_fields(reader, fields); end
  def update(attributes, collection); end
  def with_connection; end
  extend DataMapper::Chainable
  extend DataMapper::Deprecate
  include Anonymous_Module_6
  include DataMapper::Adapters::DataObjectsAdapter::SQL
end
module Anonymous_Module_6
  def close_connection(connection); end
  def open_connection; end
end
module DataMapper::Adapters::DataObjectsAdapter::SQL
  def add_extra_join_conditions(relationship, target_alias, statements, bind_values); end
  def add_join_conditions(relationship, target_alias, source_alias, statements); end
  def add_limit_offset!(statement, limit, offset, bind_values); end
  def columns_statement(properties, qualify); end
  def comparison_operator(comparison); end
  def comparison_statement(comparison, qualify); end
  def conditions_statement(conditions, qualify = nil); end
  def default_values_clause; end
  def delete_statement(query); end
  def equality_operator(property, operand); end
  def include_operator(property, operand); end
  def insert_statement(model, properties, serial); end
  def join_statement(query, bind_values, qualify); end
  def like_operator(operand); end
  def negate_operation(operand, qualify); end
  def operation_statement(operation, qualify); end
  def order_statement(order, qualify); end
  def property_to_column_name(property, qualify); end
  def quote_name(name); end
  def regexp_operator(operand); end
  def returning_clause(serial); end
  def select_statement(query); end
  def subquery(query, subject, qualify); end
  def subquery_execute(query, source_key, target_key, qualify); end
  def subquery_keys(subject); end
  def subquery_query(query, source_key); end
  def subquery_statement(query, source_key, target_key, qualify); end
  def supports_default_values?; end
  def supports_returning?; end
  def supports_subquery?(*arg0); end
  def update_statement(properties, query); end
end
