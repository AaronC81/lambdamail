# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/bson_ext/all/bson_ext.rbi
#
# bson_ext-1.12.5
module BSON
  def self.ObjectId(s); end
end
class BSON::Binary < BSON::ByteBuffer
  def initialize(data = nil, subtype = nil); end
  def inspect; end
  def subtype; end
  def subtype=(arg0); end
end
class BSON::ObjectId
  def ==(object_id); end
  def as_json(options = nil); end
  def data; end
  def data=(arg0); end
  def eql?(object_id); end
  def generate(*arg0); end
  def generation_time; end
  def hash; end
  def initialize(data = nil, time = nil); end
  def inspect; end
  def self.create_pk(doc); end
  def self.from_string(arg0); end
  def self.from_time(time, opts = nil); end
  def self.legal?(arg0); end
  def self.machine_id; end
  def to_a; end
  def to_json(options = nil); end
  def to_s; end
end
class BSON::DBRef
  def initialize(namespace, object_id); end
  def namespace; end
  def object_id; end
  def to_hash; end
  def to_s; end
end
class BSON::Code
  def ==(other); end
  def code; end
  def code=(arg0); end
  def initialize(code, scope = nil); end
  def inspect; end
  def length; end
  def scope; end
  def scope=(arg0); end
  def to_bson_code; end
end
class BSON::MaxKey
  def ==(obj); end
end
class BSON::MinKey
  def ==(obj); end
end
class BSON::Timestamp
  def ==(other); end
  def [](index); end
  def each; end
  def increment; end
  def initialize(seconds, increment); end
  def seconds; end
  def to_s; end
  include Enumerable
end
class BSON::Regex
  def ==(regexp); end
  def eql?(regexp); end
  def initialize(pattern, *opts); end
  def initialize_copy; end
  def inspect; end
  def options; end
  def options=(arg0); end
  def pattern; end
  def pattern=(arg0); end
  def self.from_native(regexp); end
  def source; end
  def str_opts_to_int(str_opts = nil); end
  def try_compile; end
end
class BSON::MongoRubyError < StandardError
end
class BSON::MongoDBError < RuntimeError
end
class BSON::BSONError < BSON::MongoDBError
end
class BSON::InvalidStringEncoding < BSON::BSONError
end
class BSON::InvalidObjectId < BSON::BSONError
end
class BSON::InvalidDocument < BSON::BSONError
end
class BSON::InvalidKeyName < BSON::BSONError
end
class BSON::OrderedHash < Hash
  def ==(other); end
  def extractable_options?; end
  def reject; end
  def select; end
end
module CBson
  def deserialize(arg0, arg1); end
  def max_bson_size; end
  def self.deserialize(arg0, arg1); end
  def self.max_bson_size; end
  def self.serialize(arg0, arg1, arg2, arg3); end
  def self.update_max_bson_size(arg0); end
  def serialize(arg0, arg1, arg2, arg3); end
  def update_max_bson_size(arg0); end
end
