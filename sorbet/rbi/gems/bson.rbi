# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/bson/all/bson.rbi
#
# bson-1.12.5
module BSON
  def self.deserialize(buf = nil, opts = nil); end
  def self.extension?; end
  def self.read_bson_document(io); end
  def self.serialize(obj, check_keys = nil, move_id = nil); end
end
module BSON::Grow
  def array!(key); end
  def array(key); end
  def b_do!(key, type = nil); end
  def b_do(key, type = nil); end
  def b_end!; end
  def b_end; end
  def clear!; end
  def doc!(key); end
  def doc(key); end
  def finish!; end
  def finish_one!(offset = nil); end
  def grow!(bson); end
  def grow(bson); end
  def push!(bson); end
  def push(bson); end
  def push_doc!(bson); end
  def push_doc(bson); end
  def to_e; end
  def to_t; end
  def to_v; end
  def unfinish!; end
end
class BSON::ByteBuffer
  def ==(other); end
  def append!(buffer); end
  def check_read_length(len); end
  def chr(byte); end
  def clear; end
  def dump; end
  def ensure_length(length); end
  def get(len = nil); end
  def get_double; end
  def get_int; end
  def get_long; end
  def initialize(initial_data = nil, max_size = nil); end
  def length; end
  def max_size; end
  def more?; end
  def order; end
  def position; end
  def position=(val); end
  def prepend!(buffer); end
  def put(byte, offset = nil); end
  def put_array(array, offset = nil); end
  def put_binary(data, offset = nil); end
  def put_double(d, offset = nil); end
  def put_int(i, offset = nil); end
  def put_long(i, offset = nil); end
  def put_num(i, offset, bytes); end
  def rewind; end
  def size; end
  def to_a(format = nil); end
  def to_s; end
  def unpack(format = nil); end
  include BSON::Grow
end
class BSON::BSON_C
  def self.deserialize(buf = nil, opts = nil); end
  def self.max_bson_size; end
  def self.serialize(obj, check_keys = nil, move_id = nil, max_bson_size = nil); end
  def self.update_max_bson_size(connection); end
end
class BSON::BSON_RUBY
  def bson_type(o); end
  def deserialize(buf = nil, opts = nil); end
  def deserialize_array_data(buf, opts = nil); end
  def deserialize_binary_data(buf); end
  def deserialize_boolean_data(buf); end
  def deserialize_code_w_scope_data(buf, opts = nil); end
  def deserialize_cstr(buf); end
  def deserialize_date_data(buf); end
  def deserialize_dbref_data(buf); end
  def deserialize_number_data(buf); end
  def deserialize_number_int_data(buf); end
  def deserialize_number_long_data(buf); end
  def deserialize_object_data(buf, opts = nil); end
  def deserialize_oid_data(buf); end
  def deserialize_regex_data(buf, opts = nil); end
  def deserialize_string_data(buf); end
  def deserialize_timestamp_data(buf); end
  def encoded_str(str); end
  def hex_dump; end
  def initialize(max_bson_size = nil); end
  def self.deserialize(buf = nil, opts = nil); end
  def self.max_bson_size; end
  def self.serialize(obj, check_keys = nil, move_id = nil, max_bson_size = nil); end
  def self.serialize_cstr(buf, val); end
  def self.serialize_key(buf, key); end
  def self.to_utf8_binary(str); end
  def self.update_max_bson_size(connection); end
  def serialize(obj, check_keys = nil, move_id = nil); end
  def serialize_array_element(buf, key, val, check_keys); end
  def serialize_binary_element(buf, key, val); end
  def serialize_boolean_element(buf, key, val); end
  def serialize_code_w_scope(buf, key, val); end
  def serialize_date_element(buf, key, val); end
  def serialize_dbref_element(buf, key, val); end
  def serialize_eoo_element(buf); end
  def serialize_key_value(k, v, check_keys); end
  def serialize_max_key_element(buf, key); end
  def serialize_min_key_element(buf, key); end
  def serialize_null_element(buf, key); end
  def serialize_number_element(buf, key, val, type); end
  def serialize_object_element(buf, key, val, check_keys, opcode = nil); end
  def serialize_oid_element(buf, key, val); end
  def serialize_regex_element(buf, key, val); end
  def serialize_string_element(buf, key, val, type); end
  def serialize_timestamp_element(buf, key, val); end
  def to_a; end
  def to_s; end
  def unpack; end
end
